type: edu
custom_name: stage6
files:
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.2.2.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        compile("org.springframework.boot:spring-boot-starter-web")
    }
  learner_created: false
- name: src/engine/WebQuizEngine.java
  visible: true
  text: |
    package engine;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class WebQuizEngine {

        public static void main(String[] args) {
            SpringApplication.run(WebQuizEngine.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/tests/WebQuizEngineTest.java
  visible: false
  text: |
    package tests;

    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import engine.WebQuizEngine;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.any;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class WebQuizEngineTest extends SpringTest {
        public WebQuizEngineTest() {
            super(WebQuizEngine.class, "../quizdb.mv.db");
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        private static String quiz1 =
            "{\n" +
                "  \"title\": \"The Java Logo\", \n" +
                "  \"text\": \"What is depicted on the Java logo?\",\n" +
                "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                "  \"answer\": [2]\n" +
                "}";

        private static String quiz2 =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String quiz3 =
            "{\n" +
                "  \"title\": \"Math1\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+3\",\"2+2\",\"8-1\",\"1+5\"],\n" +
                "  \"answer\": [0,1]\n" +
                "}";

        private static String quiz4 =
            "{\n" +
                "  \"title\": \"Math2\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+1\",\"2+2\",\"8-1\",\"5-1\"],\n" +
                "  \"answer\": [1,3]\n" +
                "}";

        private static String quiz5 =
            "{\n" +
                "  \"title\": \"Math3\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"],\n" +
                "  \"answer\": []\n" +
                "}";

        private static String quiz6 =
            "{\n" +
                "  \"title\": \"Math4\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"]\n" +
                "}";

        private static String quiz7 =
            "{\n" +
                "  \"title\": \"Math5\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2^2\",\"2+2\",\"2-2\",\"2*2\"],\n" +
                "  \"answer\": [0,1,3]\n" +
                "}";

        private static String[] quizzes = new String[] {
            quiz1, quiz2, quiz3, quiz4, quiz5, quiz6, quiz7
        };

        private static int[] quizIds = new int[] {
            0, 0, 0, 0, 0, 0, 0
        };

        private static String error400noTitle =
            "{\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyTitle =
            "{\n" +
                "  \"title\": \"\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noText =
            "{\n" +
                "  \"title\": \"123123123\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyText =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"123123123\",\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [ ]\n" +
                "  \"answer\": [ ]\n" +
                "}";

        private static String error400oneOption =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\"]\n" +
                "  \"answer\": [0]\n" +
                "}";


        private static String login1 = "test@google.com";
        private static String pass1 = "qwerty";

        private static String login2 = "user@google.com";
        private static String pass2 = "12345";

        private static HttpRequest auth(HttpRequest req, int user) {
            String login;
            String pass;
            if (user == 1) {
                login = login1;
                pass = pass1;
            } else if (user == 2) {
                login = login2;
                pass = pass2;
            } else {
                login = fakeLogin;
                pass = fakePass;
            }
            return req.basicAuth(login, pass);
        }

        private static String fakeLogin = "qwerty@google.com";
        private static String fakePass = "456534";

        private static String noAtInLogin_login = "google.com";
        private static String noAtInLogin_pass = "asddfggh";

        private static String noDotInLogin_login = "well@googlecom";
        private static String noDotInLogin_pass = "rtyfgcxsfd";

        private static String loginExist_login = "test@google.com";
        private static String loginExist_pass = "rtyfgcxsfd1";

        private static String shortPassword_login = "someuser@gmail.com";
        private static String shortPassword_pass = "1234";

        private static String shortPassword2_login = "someuser2@gmail.com";
        private static String shortPassword2_pass = "123";

        @DynamicTestingMethod
        DynamicTesting[] dt = new DynamicTesting[] {
            // Test login
            () -> testRegister(login1, pass1, 200),
            () -> testRegister(login2, pass2, 200),
            () -> testRegister(noAtInLogin_login, noAtInLogin_pass, 400),
            () -> testRegister(noDotInLogin_login, noDotInLogin_pass, 400),
            () -> testRegister(loginExist_login, loginExist_pass, 400),
            () -> testRegister(shortPassword_login, shortPassword_pass, 400),
            () -> testRegister(shortPassword2_login, shortPassword2_pass, 400),


            // Add 2 quizzes and check their existence
            () -> testAllQuizzes(0, 0,1),
            () -> testAllQuizzes(0, 0,2),

            () -> testCreateQuiz(0, 1),
            () -> testQuizExists(0, 2),
            () -> testQuizNotExists(0, 2, 125),

            () -> testAllQuizzes(1, 0,1),

            () -> testCreateQuiz(1, 2),
            () -> testQuizExists(1, 2),
            () -> testQuizNotExists(1, 2, 125),

            () -> testAllQuizzes(2, 0,2),


            // No auth operations tests
            () -> testAllQuizzesNoAuth(),
            () -> testCreateQuizNoAuth(1),
            () -> testCreateQuizNoAuth(2),
            () -> testSolveQuizNoAuth(quizIds[0], "[0]"),
            () -> testSolveQuizNoAuth(quizIds[1], "[1]"),
            () -> testDeleteQuizzesNoAuth(quizIds[0]),
            () -> testDeleteQuizzesNoAuth(quizIds[1]),
            () -> testCompletedQuizzesNoAuth(),


            // Fake auth operations tests
            () -> testAllQuizzesFakeAuth(),
            () -> testCreateQuizFakeAuth(1),
            () -> testCreateQuizFakeAuth(2),
            () -> testSolveQuizFakeAuth(quizIds[0], "[0]"),
            () -> testSolveQuizFakeAuth(quizIds[1], "[1]"),
            () -> testDeleteQuizzesFakeAuth(quizIds[0]),
            () -> testDeleteQuizzesFakeAuth(quizIds[1]),
            () -> testCompletedQuizzesFakeAuth(),


            // Solve two quizzes
            () -> checkQuizSuccess(quizIds[0], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[0], "[1]", false, 2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true, 1),
            () -> checkQuizSuccess(quizIds[0], "[3]", false, 2),

            () -> checkQuizSuccess(quizIds[1], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[1]", true, 2),
            () -> checkQuizSuccess(quizIds[1], "[2]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[3]", false, 2),


            // Check completed
            () -> testCompletedQuizzes(1, 1, 0 ,0, quizIds[0]),
            () -> testCompletedQuizzes(1, 2, 0, 0, quizIds[1]),


            // Test database save
            () -> testAllQuizzes(2, 0, 1),
            () -> testAllQuizzes(2, 0,2),
            () -> reloadServer(),
            () -> testAllQuizzes(2, 0,1),
            () -> testAllQuizzes(2, 0,2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true, 2),
            () -> checkQuizSuccess(quizIds[0], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[1], "[1]", true, 1),


            // Check completed
            () -> testCompletedQuizzes(2, 1, 0 ,1, quizIds[0]),
            () -> testCompletedQuizzes(2, 1, 0 ,0, quizIds[1]),

            () -> testCompletedQuizzes(2, 2, 0, 1, quizIds[1]),
            () -> testCompletedQuizzes(2, 2, 0, 0, quizIds[0]),


            // Test wrongly created quizzes
            () -> addIncorrectQuiz(error400noTitle, 1),
            () -> addIncorrectQuiz(error400emptyTitle, 2),
            () -> addIncorrectQuiz(error400noText, 1),
            () -> addIncorrectQuiz(error400emptyText, 2),
            () -> addIncorrectQuiz(error400noOptions, 1),
            () -> addIncorrectQuiz(error400emptyOptions, 2),
            () -> addIncorrectQuiz(error400oneOption, 1),


            // Test multiple answers
            () -> testCreateQuiz(2, 1),
            () -> testQuizExists(2, 1),
            () -> testQuizNotExists(2, 1, 125),
            () -> checkQuizSuccess(quizIds[2], "[]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,1]", true, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(3, 1),
            () -> testQuizExists(3, 1),
            () -> testQuizNotExists(3, 1, 125),
            () -> checkQuizSuccess(quizIds[3], "[]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(4, 1),
            () -> testQuizExists(4, 1),
            () -> testQuizNotExists(4, 1, 125),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1,2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2,3]", false, 2),

            () -> testCreateQuiz(5, 1),
            () -> testQuizExists(5, 1),
            () -> testQuizNotExists(5, 1, 125),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[5], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(6, 1),
            () -> testQuizExists(6, 1),
            () -> testQuizNotExists(6, 1, 125),
            () -> checkQuizSuccess(quizIds[6], "[]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2,3]", false, 2),

            () -> testAllQuizzes(7, 0,2),
            () -> reloadServer(),
            () -> testAllQuizzes(7, 0,2),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[5], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),


            // Check completed
            () -> testCompletedQuizzes(5, 1, 0 ,4, quizIds[0]),
            () -> testCompletedQuizzes(5, 1, 0 ,3, quizIds[1]),
            () -> testCompletedQuizzes(5, 1, 0 ,2, quizIds[4]),
            () -> testCompletedQuizzes(5, 1, 0 ,1, quizIds[5]),
            () -> testCompletedQuizzes(5, 1, 0 ,0, quizIds[5]),

            () -> testCompletedQuizzes(6, 2, 0, 5, quizIds[1]),
            () -> testCompletedQuizzes(6, 2, 0, 4, quizIds[0]),
            () -> testCompletedQuizzes(6, 2, 0, 3, quizIds[2]),
            () -> testCompletedQuizzes(6, 2, 0, 2, quizIds[3]),
            () -> testCompletedQuizzes(6, 2, 0, 1, quizIds[6]),
            () -> testCompletedQuizzes(6, 2, 0, 0, quizIds[6]),


            // Test pagination completed quizzes
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 1),

            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 2),

            () -> testCompletedQuizzes(10, 1, 0 ,0, quizIds[6]),
            () -> testCompletedQuizzes(10, 1, 0 ,1, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,2, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,3, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,4, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,5, quizIds[4]),
            () -> testCompletedQuizzes(1, 1, 1 ,0, quizIds[0]),

            () -> testCompletedQuizzes(10, 2, 0 ,0, quizIds[5]),
            () -> testCompletedQuizzes(10, 2, 0 ,1, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,2, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,3, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,4, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,5, quizIds[3]),
            () -> testCompletedQuizzes(2, 2, 1 ,1, quizIds[1]),
            () -> testCompletedQuizzes(2, 2, 1 ,0, quizIds[0]),


            // Test delete
            () -> testDelete(quizIds[0], 1, 204),
            () -> testDelete(quizIds[0], 1, 404),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizExists(1, 1),
            () -> testQuizExists(1, 2),

            () -> testDelete(quizIds[1], 1, 403),
            () -> testDelete(quizIds[1], 1, 403),
            () -> testDelete(quizIds[1], 2, 204),
            () -> testDelete(quizIds[1], 2, 404),
            () -> testDelete(quizIds[1], 1, 404),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizNotExists(1, 1, 0),
            () -> testQuizNotExists(1, 2, 0),

            () -> testAllQuizzes(5, 0,1),
            () -> reloadServer(),
            () -> testAllQuizzes(5, 0,2),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizNotExists(1, 1, 0),
            () -> testQuizNotExists(1, 2, 0),


            // Test pagination all quizzes
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testAllQuizzes(10, 0,1),
            () -> testAllQuizzes(10, 0,2),
            () -> testAllQuizzes(5, 1,1),
            () -> testAllQuizzes(5, 1,2),
        };

        private CheckResult testRegister(String login, String password, int status) {
            JsonObject json = new JsonObject();
            json.addProperty("email", login);
            json.addProperty("password", password);

            String url = "/api/register";
            HttpRequest req = post(url, getPrettyJson(json));
            HttpResponse resp = req.send();

            checkStatusCode(resp, status);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuizNoAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuizFakeAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testSolveQuizNoAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testSolveQuizFakeAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testAllQuizzesNoAuth() {
            String url = "/api/quizzes";
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testAllQuizzesFakeAuth() {
            String url = "/api/quizzes";
            HttpResponse resp = auth(get(url), 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testDeleteQuizzesNoAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testDeleteQuizzesFakeAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCompletedQuizzesNoAuth() {
            String url = "/api/quizzes/completed";
            HttpRequest req = get(url).addParam("page", "0");
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCompletedQuizzesFakeAuth() {
            String url = "/api/quizzes/completed";
            HttpRequest req = get(url).addParam("page", "0");
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuiz(int quizNum, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(i -> {
                        quizIds[quizNum] = i;
                        return true;
                    }))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testQuizExists(int quizNum, int user) {
            int quizId = quizIds[quizNum];
            String quiz = quizzes[quizNum];

            String url = "/api/quizzes/" + quizId;

            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            expect(getPrettyJson(rightQuiz)).asJson().check(
                isObject()
                    .value("id", quizId)
                    .value("title", isString())
                    .value("text", isString())
                    .value("options", isArray(any()))
            );

            JsonElement json = resp.getJson();

            CheckResult wrongResponse = CheckResult.wrong(
                "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(json)
            );

            if (!json.isJsonObject()) {
                return wrongResponse;
            }

            JsonObject obj = json.getAsJsonObject();

            if (!rightQuiz.equals(obj)) {
                return wrongResponse;
            }

            return CheckResult.correct();
        }

        private CheckResult testQuizNotExists(int quizNum, int user, int shift) {
            int quizId = quizIds[quizNum];

            String url = "/api/quizzes/" + (quizId + shift);
            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 404);

            return CheckResult.correct();
        }

        private CheckResult testAllQuizzes(int count, int page, int user) {
            String url = "/api/quizzes";
            HttpRequest req = get(url).addParam("page", "" + page);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("content", isArray(count, isObject()
                        .value("id", isInteger())
                        .value("title", isString())
                        .value("text", isString())
                        .value("options", isArray(any()))
                    ))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testCompletedQuizzes(int count, int user, int page, int indexForCheckingQuizId, int quizNum) {
            String url = "/api/quizzes/completed";
            HttpRequest req = get(url).addParam("page", "" + page);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("content",
                        isArray(count,
                            isObject()
                                .value("id", isInteger())
                                .value("completedAt", isString()))

                            .item(indexForCheckingQuizId,
                                isObject()
                                    .value("id", quizNum)
                                    .value("completedAt", isString()))
                    )
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse, int user) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("success", shouldResponse)
                    .value("feedback", isString())
            );

            return CheckResult.correct();
        }

        private CheckResult addIncorrectQuiz(String quiz, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quiz);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 400);
            return CheckResult.correct();
        }

        private CheckResult testDelete(int quizNum, int user, int status) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, status);
            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage(), ex);
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/engine/Result.java
  visible: true
  text: |
    package engine;

    public class Result {
        private boolean success;
        private String feedback;

        public Result() {}
        public Result(boolean success, String feedback) {
            this.success = success;
            this.feedback = feedback;
        }

        public boolean isSuccess() {
            return success;
        }

        public void setSuccess(boolean success) {
            this.success = success;
        }

        public String getFeedback() {
            return feedback;
        }

        public void setFeedback(String feedback) {
            this.feedback = feedback;
        }
    }
  learner_created: true
- name: src/engine/WebSecurityConfig.java
  visible: true
  text: |-
    package engine;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;


    @Configuration
    @EnableWebSecurity
    public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
        @Autowired
        UserService userService;

        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http
                    .csrf().disable()
                    .headers().frameOptions().disable()
                    .and().sessionManagement().disable();
            http
                    .authorizeRequests()
                    .antMatchers(HttpMethod.POST, "/actuator/shutdown").anonymous()
                    .antMatchers(HttpMethod.POST, "/actuator/shutdown").permitAll()
                    .antMatchers("/api/register").permitAll()
                    .antMatchers("/api/users").permitAll()
                    .antMatchers("/api/quizzes").hasRole("USER")
                    .anyRequest().authenticated()
                    .and()
                    .httpBasic();
        }

        @Bean
        public BCryptPasswordEncoder bCryptPasswordEncoder() {
            return new BCryptPasswordEncoder();
        }

        @Bean
        public UserDetailsService userDetailsService() {
            return new UserService();
        }


        // It's necessary to point our UserService as an Authentication Manager!!!
        @Override
        public void configure(AuthenticationManagerBuilder builder) throws Exception {
            builder.userDetailsService(userService);
        }
    }
  learner_created: true
- name: src/engine/RoleRepository.java
  visible: true
  text: |
    package engine;

    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface RoleRepository extends CrudRepository<Role, Integer> {
        Role findByName(String name);
    }
  learner_created: true
- name: src/engine/Role.java
  visible: true
  text: |
    package engine;

    import org.springframework.security.core.GrantedAuthority;
    import javax.persistence.*;
    import java.util.Set;

    @Entity
    @Table(name = "roles")
    public class Role implements GrantedAuthority {
        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private int id;
        private String name;

        @Transient
        @ManyToMany(mappedBy = "roles")
        private Set<User> users;

        public Role() {
        }

        public Role(int id) {
            this.id = id;
        }

        public Role(int id, String name) {
            this.id = id;
            this.name = name;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public Set<User> getUsers() {
            return users;
        }

        public void setUsers(Set<User> users) {
            this.users = users;
        }

        @Override
        public String getAuthority() {
            return getName();
        }

        @Override
        public String toString() {
            return "Role name: " + name;
        }
    }
  learner_created: true
- name: src/engine/QuizRepository.java
  visible: true
  text: |-
    package engine;

    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface QuizRepository extends CrudRepository<Quiz, Integer> {}
  learner_created: true
- name: src/engine/Quiz.java
  visible: true
  text: |
    package engine;

    import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

    import javax.persistence.*;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Size;
    import java.util.Arrays;

    @Entity
    @Table(name = "quizzes")
    @JsonIgnoreProperties(value={ "answer", "creator" }, allowSetters = true)
    public class Quiz {

        private int id;

        @NotEmpty(message = "Title can't be empty")
        private String title;

        @NotEmpty(message = "Text can't be empty")
        private String text;

        @NotNull
        @Size(min = 2, message = "The quiz must contain two or more options")
        private String[] options;

        private Integer[] answer;
        private String creator;

        public Quiz(){}

        public Quiz(int id, String title, String text, String[] options, Integer[] answer) {
            this.id = id;
            this.title = title;
            this.text = text;
            this.options = options.clone();
            this.answer = answer;
        }

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        public int getId() { return id; }

        public void setId(int id) { this.id = id; }

        public String getTitle() {
            return title;
        }

        public void setTitle(String title) {
            this.title = title;
        }

        public String getText() {
            return text;
        }

        public void setText(String text) {
            this.text = text;
        }

        public String[] getOptions() {
            return options;
        }

        public void setOptions(String[] options) {
            this.options = options;
        }

        public Integer[] getAnswer() { return answer; }

        public void setAnswer(Integer[] answer) { this.answer = answer.clone(); }

        @Override
        public String toString() {
            String result = String.format("id: %d\ntitle: %s\nanswers:[", id, title);
            for (int i = 0; i < answer.length; i++) {
                result += answer[i] + " ";
            }
            result += "]\n";

            return result;
        }

        public void fixAnswers() {
            if (answer == null) {
                answer = new Integer[0];
            } else {
                Arrays.sort(answer);
            }
        }

        public String getCreator() {
            return creator;
        }

        public void setCreator(String creator) {
            this.creator = creator;
        }
    }
  learner_created: true
- name: src/engine/QuizAnswers.java
  visible: true
  text: |
    package engine;

    public class QuizAnswers {
        private Integer[] answer;

        public QuizAnswers() {}
        public QuizAnswers(Integer[] answers) {
            setAnswer(answers);
        }

        public Integer[] getAnswer() {
            return answer;
        }
        public void setAnswer(Integer[] answer) {
            this.answer = answer;
        }

        @Override
        public String toString() {
            if (answer == null) {
                return "answer = null";
            }

            StringBuilder result = new StringBuilder();
            result.append("answer = [");
            for (int i = 0; i < answer.length; i++) {
                result.append(answer[i] + " ");
            }
            result.append("]");
            return result.toString();
        }
    }
  learner_created: true
- name: src/engine/QuizController.java
  visible: true
  text: |
    package engine;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.core.Authentication;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;
    import javax.validation.Valid;
    import java.util.Arrays;
    import java.util.List;

    @RestController
    public class QuizController {

        @Autowired
        public QuizRepository quizRepository;

        @Autowired
        public UserRepository userRepository;

        @Autowired
        public UserService userService;

        public QuizController(){}

        @PostMapping(path = "/api/quizzes/{id}/solve")
        public Result solve(@PathVariable int id, @RequestBody QuizAnswers answer) {
            boolean isCorrect = false;

            if (answer.getAnswer() != null) {
                Quiz quiz = quizRepository.findById(id).orElse(null);
                if (quiz == null) {
                    throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Not found");
                } else {
                    isCorrect = Arrays.equals(answer.getAnswer(), quiz.getAnswer());
                }
            }

            if (isCorrect) {
                return new Result(true, "Congratulations, you're right!");
            } else {
                return new Result(false, "Wrong answer! Please, try again.");
            }
        }

        @PostMapping(path = "/api/quizzes")
        public Quiz createQuiz(@Valid @RequestBody Quiz newQuiz) {

            newQuiz.fixAnswers();
            newQuiz.setCreator(getCurrentUser());

            quizRepository.save(newQuiz);

            return newQuiz;
        }

        @GetMapping(path = "/api/quizzes")
        public List<Quiz> getAllQuizzes() {
            return (List<Quiz>) quizRepository.findAll();
        }

        @GetMapping(path = "/api/quizzes/{id}")
        public Quiz getQuiz(@PathVariable int id) {
            Quiz quiz = quizRepository.findById(id).orElse(null);

            if (quiz == null) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Not found");
            } else {
                return quiz;
            }
        }

        @DeleteMapping(path = "/api/quizzes/{id}")
        public void deleteQuiz(@PathVariable int id) {
            Quiz quiz = quizRepository.findById(id).orElse(null);

            if (quiz == null) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Not found");
            } else {
                if (quiz.getCreator().equals(getCurrentUser())) {
                    quizRepository.delete(quiz);
                    throw new ResponseStatusException(HttpStatus.NO_CONTENT, "Quiz has been deleted successfully!");
                } else {
                    throw new ResponseStatusException(HttpStatus.FORBIDDEN, "You are not allowed to delete this quiz!");
                }
            }
        }

        @DeleteMapping(path = "/api/quizzes")
        public void deleteAllQuizzes() {
            quizRepository.deleteAll();
        }


        @PostMapping(path = "/api/register")
        public void createUser(@Valid @RequestBody User user) {
            if (!userService.saveUser(user)) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "User already exists!");
            };
        }

        @GetMapping("/api/users")
        public List<User> showAllUsers() {
            return (List<User>) userRepository.findAll();
        }

        private String getCurrentUser() {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            return authentication.getName();
        }
    }
  learner_created: true
- name: src/engine/UserService.java
  visible: true
  text: |-
    package engine;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.stereotype.Service;
    import java.util.*;

    @Service
    public class UserService implements UserDetailsService {

        @Autowired
        UserRepository userRepository;

        @Autowired
        RoleRepository roleRepository;

        @Autowired
        BCryptPasswordEncoder bCryptPasswordEncoder;

        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            User user = userRepository.findByEmail(username);

            if (user == null) {
                throw new UsernameNotFoundException("User not found");
            }

            List<SimpleGrantedAuthority> authorities = Arrays.asList(new SimpleGrantedAuthority("ROLE_USER"));

            org.springframework.security.core.userdetails.User newUser = new org.springframework.security.core.userdetails.User(
                    user.getEmail(),
                    user.getPassword(),
                    true,
                    true,
                    true,
                    true,
                    authorities);

            return newUser;
        }

        public User findUserById(int userId) {
            Optional<User> userFromDb = userRepository.findById(userId);
            return userFromDb.orElse(new User());
        }

        public List<User> allUsers() {
            return (List<User>) userRepository.findAll();
        }

        public boolean saveUser(User user) {
            User userFromDB = userRepository.findByEmail(user.getUsername());

            if (userFromDB != null) {
                return false;
            }

            Role role = new Role();
            role.setName("ROLE_USER");

            Set<User> users = role.getUsers();
            if (users == null) {
                users = Set.of(user);
            } else {
                users.add(user);
            }

            role.setUsers(users);

            user.setRoles(Collections.singleton(role));
            user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));

            roleRepository.save(role);
            userRepository.save(user);
            return true;
        }

        public boolean deleteUser(int userId) {
            if (userRepository.findById(userId).isPresent()) {
                userRepository.deleteById(userId);
                return true;
            }
            return false;
        }

        private static List<GrantedAuthority> getAuthorities (Set<Role> roles) {
            List<GrantedAuthority> authorities = new ArrayList<>();
            for (Role role : roles) {
                authorities.add(new SimpleGrantedAuthority(role.getName()));
            }
            return authorities;
        }
    }
  learner_created: true
- name: src/engine/User.java
  visible: true
  text: |
    package engine;

    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import javax.persistence.*;
    import javax.validation.constraints.Email;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Size;
    import java.util.Collection;
    import java.util.Set;


    @Entity
    @Table(name = "users")
    public class User implements UserDetails {
        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private int id;

        @NotNull
        @Size(min = 5)
        private String password;

        @Pattern(regexp = "\\w+@\\w+\\.\\w+")
        private String email;

        @Transient
        private String passwordConfirm;

        @ManyToMany(fetch = FetchType.EAGER)
        private Set<Role> roles;

        public User() {
        }

        public User(int id, @NotNull @Size(min = 5) String password, @Email String email) {
            this.id = id;
            this.password = password;
            this.email = email;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return email;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }
        public void setUsername(String email) { this.email = email; }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return getRoles();
        }

        public Set<Role> getRoles() {
            roles.forEach(System.out::println);
            return roles;
        }

        public void setRoles(Set<Role> roles) {
            this.roles = roles;
        }

        public String getPasswordConfirm() {
            return passwordConfirm;
        }
        public void setPasswordConfirm(String passwordConfirm) {
            this.passwordConfirm = passwordConfirm;
        }

        @Override
        public String toString() {
            return "User's email: " + email + "\nUser's password: " + password;
        }
    }
  learner_created: true
- name: src/engine/QuizService.java
  visible: true
  learner_created: true
- name: src/engine/SolvedQuizRepository.java
  visible: true
  learner_created: true
- name: src/engine/SolvedQuiz.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/91/stages/509/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #8

    The JSON array should be object, found array

    Full JSON:
    []

    Please find below the output of your program during this failed test.

    ---


      .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v2.2.2.RELEASE)

    2021-05-11 22:27:41.004  INFO 2014 --- [    Test worker] engine.WebQuizEngine                     : Starting WebQuizEngine on Air-Petr with PID 2014 (started by petrkireev in /Users/petrkireev/IdeaProjects/Web Quiz Engine/Web Quiz Engine/task)
    2021-05-11 22:27:41.010  INFO 2014 --- [    Test worker] engine.WebQuizEngine                     : No active profile set, falling back to default profiles: default
    2021-05-11 22:27:42.943  INFO 2014 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
    2021-05-11 22:27:43.086  INFO 2014 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 117ms. Found 4 JPA repository interfaces.
    2021-05-11 22:27:43.823  INFO 2014 --- [    Test worker] trationDelegate$BeanPostProcessorChecker : Bean &#39;org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration&#39; of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
    2021-05-11 22:27:44.408  INFO 2014 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8889 (http)
    2021-05-11 22:27:44.434  INFO 2014 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2021-05-11 22:27:44.434  INFO 2014 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
    2021-05-11 22:27:44.636  INFO 2014 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2021-05-11 22:27:44.636  INFO 2014 --- [    Test worker] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3512 ms
    2021-05-11 22:27:44.879  INFO 2014 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
    2021-05-11 22:27:45.341  INFO 2014 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
    2021-05-11 22:27:45.354  INFO 2014 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;. Database available at &#39;jdbc:h2:file:../quizdb&#39;
    2021-05-11 22:27:45.785  INFO 2014 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2021-05-11 22:27:46.005  INFO 2014 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
    2021-05-11 22:27:46.434  INFO 2014 --- [    Test worker] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
    2021-05-11 22:27:46.733  INFO 2014 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    Hibernate: create table quizzes (id integer not null, answer binary(255), creator varchar(255), options binary(255) not null, text varchar(255), title varchar(255), primary key (id))
    Hibernate: create table roles (id integer not null, name varchar(255), primary key (id))
    Hibernate: create table solved_quizzes (record_id integer not null, completed_at timestamp, id integer not null, user varchar(255), primary key (record_id))
    Hibernate: create table users (id integer not null, email varchar(255), password varchar(255) not null, primary key (id))
    Hibernate: create table users_roles (user_id integer not null, roles_id integer not null, primary key (user_id, roles_id))
    Hibernate: create sequence hibernate_sequence start with 1 increment by 1
    Hibernate: alter table users_roles add constraint FKa62j07k5mhgifpp955h37ponj foreign key (roles_id) references roles
    Hibernate: alter table users_roles add constraint FK2o0jvgh89lemvvo17cbqvdxaa foreign key (user_id) references users
    2021-05-11 22:27:48.639  INFO 2014 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2021-05-11 22:27:48.660  INFO 2014 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2021-05-11 22:27:49.361  WARN 2014 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2021-05-11 22:27:49.708  INFO 2014 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6b936ac8, org.springframework.security.web.context.SecurityContextPersistenceFilter@26dd85b0, org.springframework.security.web.header.HeaderWriterFilter@7d4e25d1, org.springframework.security.web.authentication.logout.LogoutFilter@3dda0a7d, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@52c3c8b6, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@69877f6b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6be1dfc8, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1372aa13, org.springframework.security.web.access.ExceptionTranslationFilter@4159547, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@30ce61d2]
    2021-05-11 22:27:49.906  INFO 2014 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;
    2021-05-11 22:27:50.381  INFO 2014 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2021-05-11 22:27:50.487  INFO 2014 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8889 (http) with context path &#39;&#39;
    2021-05-11 22:27:50.495  INFO 2014 --- [    Test worker] engine.WebQuizEngine                     : Started WebQuizEngine in 10.715 seconds (JVM running for 12.502)
    2021-05-11 22:27:51.282  INFO 2014 --- [nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2021-05-11 22:27:51.283  INFO 2014 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2021-05-11 22:27:51.301  INFO 2014 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 17 ms
    Hibernate: select user0_.id as id1_3_, user0_.email as email2_3_, user0_.password as password3_3_ from users user0_ where user0_.email=?
    Hibernate: call next value for hibernate_sequence
    Hibernate: insert into roles (name, id) values (?, ?)
    Hibernate: call next value for hibernate_sequence
    Hibernate: insert into users (email, password, id) values (?, ?, ?)
    Hibernate: insert into users_roles (user_id, roles_id) values (?, ?)
    Hibernate: select user0_.id as id1_3_, user0_.email as email2_3_, user0_.password as password3_3_ from users user0_ where user0_.email=?
    Hibernate: call next value for hibernate_sequence
    Hibernate: insert into roles (name, id) values (?, ?)
    Hibernate: call next value for hibernate_sequence
    Hibernate: insert into users (email, password, id) values (?, ?, ?)
    Hibernate: insert into users_roles (user_id, roles_id) values (?, ?)
    2021-05-11 22:27:52.428  WARN 2014 --- [nio-8889-exec-3] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public void engine.QuizController.createUser(engine.User): [Field error in object &#39;user&#39; on field &#39;email&#39;: rejected value [google.com]; codes [Pattern.user.email,Pattern.email,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.email,email]; arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@546a1b58,\w+@\w+\.\w+]; default message [must match &quot;\w+@\w+\.\w+&quot;]] ]
    2021-05-11 22:27:52.554  WARN 2014 --- [nio-8889-exec-4] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public void engine.QuizController.createUser(engine.User): [Field error in object &#39;user&#39; on field &#39;email&#39;: rejected value [well@googlecom]; codes [Pattern.user.email,Pattern.email,Pattern.java.lang.String,Pattern]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.email,email]; arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@546a1b58,\w+@\w+\.\w+]; default message [must match &quot;\w+@\w+\.\w+&quot;]] ]
    Hibernate: select user0_.id as id1_3_, user0_.email as email2_3_, user0_.password as password3_3_ from users user0_ where user0_.email=?
    Hibernate: select roles0_.user_id as user_id1_4_0_, roles0_.roles_id as roles_id2_4_0_, role1_.id as id1_1_1_, role1_.name as name2_1_1_ from users_roles roles0_ inner join roles role1_ on roles0_.roles_id=role1_.id where roles0_.user_id=?
    2021-05-11 22:27:52.610  WARN 2014 --- [nio-8889-exec-6] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public void engine.QuizController.createUser(engine.User): [Field error in object &#39;user&#39; on field &#39;password&#39;: rejected value [1234]; codes [Size.user.password,Size.password,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.password,password]; arguments []; default message [password],2147483647,5]; default message [size must be between 5 and 2147483647]] ]
    2021-05-11 22:27:52.626  WARN 2014 --- [nio-8889-exec-7] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public void engine.QuizController.createUser(engine.User): [Field error in object &#39;user&#39; on field &#39;password&#39;: rejected value [123]; codes [Size.user.password,Size.password,Size.java.lang.String,Size]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.password,password]; arguments []; default message [password],2147483647,5]; default message [size must be between 5 and 2147483647]] ]
    Hibernate: select user0_.id as id1_3_, user0_.email as email2_3_, user0_.password as password3_3_ from users user0_ where user0_.email=?
    Hibernate: select roles0_.user_id as user_id1_4_0_, roles0_.roles_id as roles_id2_4_0_, role1_.id as id1_1_1_, role1_.name as name2_1_1_ from users_roles roles0_ inner join roles role1_ on roles0_.roles_id=role1_.id where roles0_.user_id=?
    Hibernate: select quiz0_.id as id1_0_, quiz0_.answer as answer2_0_, quiz0_.creator as creator3_0_, quiz0_.options as options4_0_, quiz0_.text as text5_0_, quiz0_.title as title6_0_ from quizzes quiz0_ limit ?
  time: Tue, 11 May 2021 19:27:54 UTC
record: -1
